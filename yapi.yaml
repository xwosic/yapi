# dollar sign ($) - look in endpoint's memory (models, variables, etc)

# main.py   (app startup: yaml validation, endpoints creation, start)
# yapi.yml
# models/*  (models used by endpoints)
# logic/*   (extra python logic to run in endpoints)


# load / set env variables
# they will be available in each endpoint
environment:
  - connection_string: sqlite:///yapi.db
  - name: with value

db:
  use: sqlalchemy
  # how to connect to db?

api:
  get /users/filtered:
    request:
      model: FilterUser
      dependencies:
        - auth
    operations:
      - sql:
          users:
            query: |
              select * 
              from users
              where id=FilterUser.id
              and first_name=FilterUser.first_name
              and last_name=FilterUser.last_name
    response:
      model: User

  get /users/{user_id}:
    description: |
      this endpoint returns user with provided id
      response contains fields: id, first_name, last_name
    request:
      model: UserId
      dependencies: 
        - auth
    operations:
      - sql:
          users:
            query: |
              select * 
              from users 
              where id=UserId.user_id
    response:
      variable: users

  get /users:
    description: |
      this endpoint returns all users
    operations:
      - sql:
          users:
            query: select * from users
    response: all
  
  post /users:
    request:
      model: User
      validation:
        not_in_db:
          error_msg: this user already exists
          query: |
            select * 
            from users 
            where 
            first_name=User.first_name
            and last_name=User.last_name
    operations:
      - sql:
          users:
            query: |
              insert into users 
              (id, first_name, last_name) 
              values 
              (User.id, User.first_name, User.last_name)
    response: ~
  
  put /users/{user_id}:
    request:
      model: User
      validation:
        in_db:
          error_msg: user doesn't exists
          query: |
            select id from users where id=User.id
    operations:
      - sql:
          users:
            query: |
              update users
              set
                first_name=User.first_name,
                last_name=User.last_name
              where
                id=User.id
  
  delete /users/{user_id}:
    request:
      model: UserId
    operations:
      - sql:
          users:
            query: |
              delete from users
              where id=UserId.user_id

  get /test:
    description: "This endpoint will return user specified by id or username."
    request:
      # user pydanticmodel
      model: User  #(take from models folder)
      # in pydantic model there can be validation
      # and here can be extra validation
      validation:
        user_id:
          exists_in_db: true
        age:
          default: 18  # optional: false
      dependencies:
        - auth
    operations:
      # executed from top to bottom
      # sql prefix - on the right site there are sql queries to eval
      # results of query should be saved to variable on left site
      - sql:
          users: 
            query: select * from users
            commit: false
          second_result:
            query: "insert into users (id, first_name, last_name) values (2, 'foo', 'bar')"
            commit: true
      - python:
          name_of_variable_to_save_result: 1 + 3
          response: name_of_variable_to_save_result + 1
          name: 123
          name_2: "123.4"
          name_3: "'asdf'"
      # - request:
      #     $name_of_result:
      #       url: https://some/url
      #       auth: $utils.create_auth_header(id=model.user_id)
    # calling functions or running python code from cli
    # command: bash -c "python some_logic.py arg1 arg2 ..."
    logic: /path/to/python/logic/file function_name args, ... , key=values  #(instead of operations)

    response:
      model: User
      # variable: $name_of_result
